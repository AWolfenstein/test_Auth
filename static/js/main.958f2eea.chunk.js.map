{"version":3,"sources":["logo.svg","components/SignIn.jsx","actions/authAction.js","components/User.jsx","components/NotFound.jsx","App.js","serviceWorker.js","reducers/auth.js","reducers/index.js","index.js"],"names":["module","exports","connect","state","isLoggedIn","auth","dispatch","useDispatch","history","useHistory","formik","useFormik","initialValues","clientId","email","password","onSubmit","values","data","JSON","stringify","fetch","method","headers","body","mode","then","response","ok","Error","statusText","json","localStorage","setItem","accessToken","type","payload","token","userLoggedIn","catch","e","console","log","useEffect","push","removeItem","Container","fluid","Row","Col","className","Form","handleSubmit","Group","controlId","Label","Control","name","placeholder","onChange","handleChange","value","Text","Button","variant","user","getItem","style","margin","Card","Header","as","Body","Title","onClick","NotFound","to","App","exact","path","component","Boolean","window","location","hostname","match","parse","initialState","combineReducers","action","store","createStore","reducer","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.958f2eea.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React ,{useEffect }from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useFormik } from \"formik\";\r\nimport { Container, Col, Row, Form, Button } from \"react-bootstrap\";\r\nimport \"../styles/form.css\";\r\nimport { connect ,useDispatch} from \"react-redux\";\r\nimport {submitLogin} from '../actions/authAction'\r\nconst SignIn = ({ isLoggedIn}) => {\r\n    const dispatch = useDispatch()\r\n    let history = useHistory()\r\n  const formik = useFormik({\r\n    initialValues: {\r\n        clientId: \"1\",\r\n      email: \"\",\r\n      password: \"\",\r\n    },\r\n    onSubmit: (values) => {\r\n        dispatch(submitLogin(JSON.stringify(values, null, 2)))  \r\n      console.log(JSON.stringify(values));\r\n    },\r\n  });\r\n  useEffect(()=>{\r\n    isLoggedIn ?history.push(\"/user\"): localStorage.removeItem('accessToken');\r\n  })\r\n  const body = (\r\n    <Container fluid=\"md\">\r\n      <Row>\r\n        <Col className=\"colForm\">\r\n          <Form onSubmit={formik.handleSubmit}>\r\n            <Form.Group controlId=\"formBasicEmail\">\r\n              <Form.Label>Email address</Form.Label>\r\n              <Form.Control\r\n                type=\"email\"\r\n                name=\"email\"\r\n                placeholder=\"Enter email\"\r\n                onChange={formik.handleChange}\r\n                value={formik.values.email}\r\n              />\r\n              <Form.Text className=\"text-muted\">\r\n                We'll never share your email with anyone else.\r\n              </Form.Text>\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId=\"formBasicPassword\">\r\n              <Form.Label>Password</Form.Label>\r\n              <Form.Control\r\n                type=\"password\"\r\n                name=\"password\"\r\n                onChange={formik.handleChange}\r\n                value={formik.values.password}\r\n                placeholder=\"Password\"\r\n              />\r\n            </Form.Group>\r\n            <Button variant=\"primary\" type=\"submit\">\r\n              Submit\r\n            </Button>\r\n            <br/>\r\n          </Form>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n  return body;\r\n};\r\n\r\nfunction mapStateToProps(state) {\r\n    const { isLoggedIn } = state.auth;\r\n    return {\r\n      isLoggedIn,\r\n    };\r\n  }\r\nexport default connect(mapStateToProps)(SignIn);\r\n","export const LOGIN_SUCCESS ='LOGIN_SUCCESS';\r\nexport const LOGIN_FAIL ='LOGIN_FAIL';\r\nexport const USER_LOGOUT = 'USER_LOGOUT';\r\nexport const GET_PROFILE = 'GET_PROFILE';\r\n\r\nfunction userLoggedIn(data){\r\n\treturn {\r\n\t\ttype: LOGIN_SUCCESS,\r\n        payload: { token: data }\r\n}\r\n}\r\n\r\nexport function submitLogin(data){\r\n\treturn dispatch => {\r\n\t\treturn fetch(`https://tager.dev.ozitag.com/api/auth/user`, { \r\n\t\t\t\tmethod: 'POST', \r\n \t\t\t\theaders: {\r\n    \t\t\t\t'Accept': 'application/json',\r\n                    'Content-Type': 'application/json',\r\n                    'Access-Control-Allow-Origin':\"*\",\r\n                    'Access-Control-Allow-Headers': '*',\r\n                    'Access-Control-Allow-Methods': \"*\",\r\n  \t\t\t\t},\r\n\t\t\t\tbody:  data, \r\n\t\t\t\tmode: 'cors'})\r\n\t\t\t.then( (response) => {\r\n\t\t        if (!response.ok) {\r\n\t\t\t\tthrow Error(response.statusText);\r\n\t\t\t\t}\r\n\t\t\t\r\n        \t\treturn response.json();\r\n\t\t\t})\r\n\t\t\t.then( (data) => {\r\n                localStorage.setItem('accessToken', data.data.accessToken);\r\n                dispatch(userLoggedIn(data.data))\r\n            })\r\n\t\t\t.catch( (e) => { console.log(e) } )\r\n\t}\t\r\n}\r\nexport function getProfile(){\r\n\treturn dispatch => {\r\n     const token = localStorage.getItem('accessToken');\r\n\t\treturn fetch(`https://tager.dev.ozitag.com/api/user/profile`, { \r\n\t\t\t\tmethod: 'GET', \r\n \t\t\t\theaders: {\r\n    \t\t\t\t'Accept': 'application/json',\r\n                    'Content-Type': 'application/json',\r\n                    'Access-Control-Allow-Origin':\"*\",\r\n                    'Access-Control-Allow-Headers': '*',\r\n                    'Access-Control-Allow-Methods': \"*\",\r\n                    'Authorization': `Bearer ${token}`\r\n  \t\t\t\t},\r\n\t\t\t\tmode: 'cors'})\r\n\t\t\t.then( (response) => {\r\n\t\t        if (!response.ok) {\r\n\t\t\t\tthrow Error(response.statusText);\r\n\t\t\t\t}\r\n\t\t\t\r\n        \t\treturn response.json();\r\n\t\t\t})\r\n\t\t\t.then( (data) => {\r\n                dispatch({\r\n                    type: GET_PROFILE,\r\n                    payload: data.data\r\n            });\r\n            })\r\n\t\t\t.catch( (e) => { console.log(e) } )\r\n\t}\t\r\n}\r\n\r\nexport function logout() {\r\n\treturn dispatch => {\r\n     const token = localStorage.getItem('accessToken');\r\n\t\treturn fetch(`https://tager.dev.ozitag.com/api/user/profile`, { \r\n\t\t\t\tmethod: 'GET', \r\n \t\t\t\theaders: {\r\n    \t\t\t\t'Accept': 'application/json',\r\n                    'Content-Type': 'application/json',\r\n                    'Access-Control-Allow-Origin':\"*\",\r\n                    'Access-Control-Allow-Headers': '*',\r\n'Access-Control-Allow-Methods': \"*\",\r\n                    'Authorization': `Bearer ${token}`\r\n  \t\t\t\t},\r\n\t\t\t\tmode: 'cors'})\r\n\t\t\t.then( (response) => {\r\n\t\t        if (!response.ok) {\r\n\t\t\t\tthrow Error(response.statusText);\r\n\t\t\t\t}\r\n\t\t\t\r\n        \t\treturn response.json();\r\n\t\t\t})\r\n\t\t\t.then( (data) => {\r\n                console.log(data.data)\r\n                localStorage.removeItem('accessToken');\r\n                dispatch({\r\n                    type: USER_LOGOUT,\r\n                    payload: data.data\r\n            });\r\n            })\r\n\t\t\t.catch( (e) => { console.log(e) } )\r\n\t}\t\r\n}\r\n","import React, { useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Container, Col, Row, Card, Button } from \"react-bootstrap\";\r\nimport { connect, useDispatch } from \"react-redux\";\r\nimport { getProfile,logout } from \"../actions/authAction\";\r\nconst User = ({ user,isLoggedIn }) => {\r\n  const dispatch = useDispatch();\r\n  let history = useHistory()\r\n  useEffect(() => {\r\n    isLoggedIn ? dispatch(getProfile()) : history.push(\"/\")\r\n  }, [isLoggedIn]);\r\n const logoutNow =()=>{\r\n    dispatch(logout())  \r\n  \r\n }\r\n  const body = (\r\n    <Container fluid=\"md\">\r\n      <Row>\r\n        <Col style={{ margin: \"20%\" }}>\r\n          <Card>\r\n            <Card.Header as=\"h5\">Profile</Card.Header>\r\n            <Card.Body>\r\n              <Card.Title>{user && user.name}</Card.Title>\r\n              <Card.Text>{user && user.email}</Card.Text>\r\n              <Button variant=\"primary\" onClick={logoutNow}>Logout</Button>\r\n            </Card.Body>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n  return body;\r\n};\r\n\r\nfunction mapStateToProps(state) {\r\n  const { isLoggedIn, user } = state.auth;\r\n  return {\r\n    isLoggedIn,\r\n    user,\r\n  };\r\n}\r\nexport default connect(mapStateToProps)(User);\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst NotFound = () => (\r\n  <div>\r\n    <h1>404 - Not Found!</h1>\r\n    <Link to=\"/\">\r\n      Go Home\r\n    </Link>\r\n  </div>\r\n);\r\n\r\nexport default NotFound;","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route ,useHistory } from \"react-router-dom\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport SignIn from \"./components/SignIn\";\nimport User from \"./components/User\";\nimport NotFound from \"./components/NotFound\";\nfunction App() {\n \n  return (\n    <div className=\"App\">\n      <Router>\n        <Switch>\n          <Route exact  path=\"/\" >\n            <SignIn  />\n          </Route>\n          <Route path=\"/user\" >\n            <User />\n          </Route>\n          <Route component={NotFound} />\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import  {LOGIN_SUCCESS,LOGIN_FAIL, USER_LOGOUT,GET_PROFILE} from \"../actions/authAction\"\r\nconst token = JSON.parse(localStorage.getItem(\"token\"));\r\n\r\nconst initialState = token\r\n  ? { isLoggedIn: true, token }\r\n  : { isLoggedIn: false, token: null };\r\n\r\nexport default function (state = initialState, action) {\r\n  const { type, payload } = action;\r\n\r\n  switch (type) {\r\n    case LOGIN_SUCCESS:\r\n      return {\r\n        ...state,\r\n        isLoggedIn: true,\r\n        token: payload.token,\r\n      };\r\n      case GET_PROFILE:\r\n        return {\r\n          ...state,\r\n          isLoggedIn: true,\r\n          user: payload,\r\n        };\r\n    case LOGIN_FAIL:\r\n      return {\r\n        ...state,\r\n        isLoggedIn: false,\r\n        user: null,\r\n      };\r\n    case USER_LOGOUT:\r\n      return {\r\n        ...state,\r\n        isLoggedIn: false,\r\n        user: null,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}","import { combineReducers } from \"redux\";\r\nimport auth from \"./auth\";\r\nexport default combineReducers({\r\n  auth,\r\n});\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport thunk from \"redux-thunk\";\nimport reducer from \"./reducers\";\n\nconst store = createStore(reducer, composeWithDevTools(applyMiddleware(thunk)));\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}